---
title: "Introducci√≥n a ML con Python üêç"
subtitle: "01_01 - `numpy`"
author: "Iv√°n Moreno"
lang: "es"
format: 
  revealjs:
    embed-resources: true
    theme: [dark]
    output-location: fragment
execute:
    echo: true
engine: jupyter
editor_options: 
  markdown: 
    wrap: 99
---

# `numpy`

## ¬øQu√© es `numpy`?

* `numpy` es una librer√≠a de Python que nos permite trabajar con vectores y matrices de forma eficiente.
* Escrita en C, es una de las librer√≠as m√°s r√°pidas para trabajar con datos en Python.
* Es la base de otras librer√≠as como `pandas` o `scikit-learn`.
* Utilizado com√∫nmente para crear colecciones multidimensionales de datos.
* Permite realizar operaciones matem√°ticas de forma eficiente (vectorizadas).

## `ndarray`

* El objeto principal de `numpy` es el `ndarray`.
* Un `ndarray` es un array multidimensional de elementos del **mismo tipo**.

## Dimensiones

* Un `ndarray` puede tener cualquier n√∫mero de dimensiones.
* Cada dimensi√≥n se conoce como **eje** (axis).
* El n√∫mero de ejes se conoce como **rango** (rank).
* El tama√±o de cada eje se conoce como **forma** (shape).

## Manipulaci√≥n ‚Äì stacking

* Podemos concatenar `ndarray` de forma horizontal o vertical.
* Para ello, utilizamos las funciones `hstack` y `vstack`.

```python
array1 = np.arange(3)
array2 = np.arange(3,6)
array1 # [0,1,2]
array2 # [3,4,5]
np.hstack((array1,array2)) # [0,1,2,3,4,5]
np.vstack((array1,array2)) # [[0,1,2],[3,4,5]]
```

## Manipulaci√≥n ‚Äì split

* Podemos dividir `ndarray` de forma horizontal o vertical.
* Para ello, utilizamos la funci√≥n `array_split` o `hsplit` y `vsplit`.
* La funci√≥n `array_split` nos permite dividir un `ndarray` en partes de tama√±o desigual.

```python
array1 = np.arange(9).reshape(3,3)
array1 # [[0,1,2],[3,4,5],[6,7,8]]
np.hsplit(array1,3) # [[0],[3],[6]]
np.vsplit(array1,3) # [[0,1,2],[3,4,5],[6,7,8]]
np.array_split(array1,3) # [[0,1],[3,4],[6,7]]
```

## Manipulaci√≥n ‚Äì indexado y slicing

* Funcionan de forma hom√≥loga a las listas de Python.
* Con la diferencia de que se devuelven vistas del `ndarray` original.
* Las vistas son referencias al `ndarray` original, no copias, por lo que cualquier cambio en la vista se refleja en el `ndarray` original.
* Mucha flexibilidad:

```python
array1 = np.arange(-3,4) # [-3,-2,-1,0,1,2,3]
array1[array1 < 0] # [-3,-2,-1]
array1[array1 % 2 == 0] = 10 # [-3, 10, -1, 10, 1, 10, 3]
array1[array1 == 10] = 0 # [-3, 0, -1, 0, 1, 0, 3]
```

## Funciones matem√°ticas

* `numpy` nos permite realizar operaciones matem√°ticas de forma eficiente, gracias a la vectorizaci√≥n.
* Las funciones matem√°ticas de `numpy` se aplican elemento a elemento.
* La vectorizaci√≥n es una t√©cnica que permite aplicar operaciones a un conjunto de datos sin necesidad de utilizar bucles.
* `numpy` ofrece una amplia lista de operadores unarios y binarios.

## Funciones matem√°ticas - lista

| Tipo | Operador | Descripci√≥n |
| --- | --- | --- |
| Unario | `abs` | Valor absoluto de cada elemento |
| Unario | `sqrt` | Ra√≠z cuadrada de cada elemento |
| Unario | `exp` | Exponencial de cada elemento |
| Unario | `log` | Logaritmo natural de cada elemento |
| Unario | `sign` | Signo de cada elemento (-1 si negativo, 0 o 1 si positivo) |
| Unario | `ceil` | Redondeo al entero m√°s peque√±o mayor o igual que cada elemento |
| Unario | `floor` | Redondeo al entero m√°s grande menor o igual que cada elemento |
| Unario | `isnan` | Devuelve un array booleano indicando si cada elemento es NaN |
| Unario | `cos`, `cosh`, `sin`, `sinh`, `tan`, `tanh` | Funciones trigonom√©tricas |
| Unario | `arccos`, `arccosh`, `arcsin`, `arcsinh`, `arctan`, `arctanh` | Funciones trigonom√©tricas inversas |
| Binario | `add` | Suma de dos arrays |
| Binario | `subtract` | Resta de dos arrays |
| Binario | `multiply` | Multiplicaci√≥n de dos arrays |
| Binario | `divide` | Divisi√≥n de dos arrays |
| Binario | `maximum`, `minimum` | M√°ximo y m√≠nimo de dos arrays |
| Binario | `greater`, `greater_equal`, `less`, `less_equal`, `equal`, `not_equal` | Operadores de comparaci√≥n |

## Filtrado (`np.where`)

* La funci√≥n `np.where` nos permite filtrar un `ndarray` de forma eficiente.
* Devuelve un `ndarray` con los elementos que cumplen una condici√≥n especificada.

```python
array1 = np.arange(10)
array1 # [0,1,2,3,4,5,6,7,8,9]
np.where(array1 % 2 == 0) # [0,2,4,6,8]
```

## Estad√≠stica descriptiva

| Funci√≥n | Descripci√≥n |
| --- | --- |
| `sum` | Suma de los elementos |
| `mean` | Media aritm√©tica de los elementos |
| `std` | Desviaci√≥n est√°ndar de los elementos |
| `cumsum` | Suma acumulada de los elementos |
| `cumprod` | Producto acumulado de los elementos |
| `min`, `max` | M√≠nimo y m√°ximo de los elementos |
| `any`, `all` | Comprueba si alg√∫n elemento es True o si todos los elementos son True |
| `unique` | Devuelve los elementos √∫nicos del array |
| `in1d` | Devuelve un array booleano indicando si cada elemento del primer array est√° contenido en el segundo array |
| `union1d` | Devuelve la uni√≥n de dos arrays |
| `intersect1d` | Devuelve la intersecci√≥n de dos arrays |

## √Ålgebra lineal

* `numpy` incluye funciones y m√©todos para realizar operaciones de √°lgebra lineal, como la multiplicaci√≥n de matrices o resoluci√≥n de sistemas de ecuaciones.
* Para ello, utilizamos el m√≥dulo `numpy.linalg`.

## √Ålgebra lineal - lista

| Funci√≥n | Descripci√≥n |
| --- | --- |
| `diag` | Devuelve la diagonal de una matriz |
| `dot` | Producto escalar de dos matrices |
| `trace` | Devuelve la traza de una matriz |
| `det` | Devuelve el determinante de una matriz |
| `inv` | Devuelve la inversa de una matriz |
| `qr` | Devuelve la descomposici√≥n QR de una matriz |
| `svd` | Devuelve la descomposici√≥n SVD de una matriz |
| `solve` | Resuelve un sistema de ecuaciones lineales |
| `eig` | Devuelve los autovalores y autovectores de una matriz |

# Pr√°ctica
