---
title: "Introducci√≥n a ML con Python üêç"
subtitle: "00_01 - Python 101"
author: "Iv√°n Moreno"
lang: "es"
format: 
  revealjs:
    embed-resources: true
    theme: [dark]
editor_options: 
  markdown: 
    wrap: 99
---

# Python 101

## ¬øQu√© es Python?

::: {.incremental}

- Lenguaje de programaci√≥n interpretado (no compilado)
- Multiplataforma
- Multiparadigma (imperativo, orientado a objetos, funcional)
- Tipado din√°mico (no es necesario declarar el tipo de las variables)
- Orientado a objetos
- Extensible (m√≥dulos y paquetes) y portable (e.g., Jython, una implementaci√≥n de Python que corre sobre la JVM)

:::

## ¬øPor qu√© Python?

::: {.incremental}

- Sintaxis sencilla y legible (indentaci√≥n)
- Gran cantidad de librer√≠as (compatible con C y C++)
- Comunidad activa
- Multiplataforma

:::


# Instalaci√≥n

## Anaconda

- Distribuci√≥n de Python (y R) para computaci√≥n cient√≠fica
- Gestor de paquetes (conda)
- Gestor de entornos (conda)
- Dos versiones: Anaconda (GUI, ~3GB) y Miniconda (CLI, ~400MB)

. . .

![](img/anaconda.png)

## Jupyter

- Cuaderno de notas interactivo para la computaci√≥n cient√≠fica
- Celdas de c√≥digo, texto (Markdown) e im√°genes / gr√°ficos
- Kernels (procesos encargados de ejecutar el c√≥digo en un lenguaje determinado)
- Interfaz web (Jupyter Notebook)

. . .

![](img/jupyter_notebook.webp)

## Descarga Anaconda

[https://www.anaconda.com/products/distribution#Downloads](https://www.anaconda.com/products/distribution#Downloads)

![](img/anaconda_down.png)

## Inicializaci√≥n del entorno

- Windows: Anaconda Prompt
- Linux & Mac: Terminal

. . .

```bash
conda create -n intro python=3.11
conda activate intro
python --version
python -i -c "print('sss üêç')" # Ctrl + D para salir
```

## Gesti√≥n de entornos con `conda`

::: {.incremental}

- Crear un entorno: `conda create -n <nombre> python=<versi√≥n>`
- Activar un entorno: `conda activate <nombre>`
- Desactivar un entorno: `conda deactivate`
- Eliminar un entorno: `conda remove -n <nombre> --all`
- Listar entornos: `conda env list`

:::

## Gesti√≥n de paquetes con `conda`

::: {.incremental}

- Instalar un paquete: `conda install <paquete>`
- Eliminar un paquete: `conda remove <paquete>`
- Listar paquetes: `conda list`

:::

## `pip` vs `conda`

::: {.incremental}

- `pip` es el gestor de paquetes oficial de Python
- `conda` es el gestor de paquetes de Anaconda
- `conda` es m√°s completo (y lento) que `pip` (e.g., gesti√≥n de entornos)
- `conda` se basa en binarios, mientras que `pip` en c√≥digo fuente (portabilidad, velocidad)
- `conda` comprueba potenciales conflictos entre dependencias, con resoluci√≥n autom√°tica de conflictos
- `pip` usa PyPI (Python Package Index), mientras que `conda` usa Anaconda Cloud (pese a que tambi√©n puede usar PyPI y otros repositorios)

:::

# Estructura

## M√≥dulos

::: {.incremental}

- Un m√≥dulo es un fichero con extensi√≥n `.py`
- Un m√≥dulo puede contener funciones, clases, variables, etc.
- Un m√≥dulo puede importar otros m√≥dulos
- Un m√≥dulo puede ser ejecutado directamente o importado por otro m√≥dulo

:::

## M√≥dulos ‚Äì Ejemplo

```python
# m√≥dulo.py
def funcion():
    print("Hola mundo")

if __name__ == "__main__":
    funcion()
```

```bash
$ python modulo.py
Hola mundo
```

```python
# otro_modulo.py
import modulo

modulo.funcion()
```

```bash
$ python otro_modulo.py
Hola mundo
```

## Paquetes

::: {.incremental}

- Un paquete es un conjunto de m√≥dulos
- Un paquete es un directorio con un fichero `__init__.py`
- Un paquete puede contener otros paquetes (subpaquetes)
- Un paquete puede ser importado por otro paquete o m√≥dulo

:::

## Paquetes ‚Äì Ejemplo

```bash
$ tree
.
‚îú‚îÄ‚îÄ main.py
‚îî‚îÄ‚îÄ paquete
    ‚îú‚îÄ‚îÄ __init__.py
    ‚îî‚îÄ‚îÄ modulo.py
```

```python
# main.py
import paquete.modulo

paquete.modulo.funcion()
```

```bash
$ python main.py
Hola mundo
```

## Estructura de programas en Python

```bash
$ tree
.
‚îú‚îÄ‚îÄ main.py
‚îî‚îÄ‚îÄ paquete
    ‚îú‚îÄ‚îÄ __init__.py
    ‚îú‚îÄ‚îÄ modulo.py
    ‚îî‚îÄ‚îÄ subpaquete
        ‚îú‚îÄ‚îÄ __init__.py
        ‚îî‚îÄ‚îÄ otro_modulo.py
```

```python
# main.py
import paquete.subpaquete.otro_modulo

paquete.subpaquete.otro_modulo.funcion()
```

```bash
$ python main.py
Hola mundo
```
