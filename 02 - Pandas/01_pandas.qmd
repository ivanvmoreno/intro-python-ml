---
title: "Introducci√≥n a ML con Python üêç"
subtitle: "02_01 - `pandas`"
author: "Iv√°n Moreno"
lang: "es"
format: 
  revealjs:
    embed-resources: true
    theme: [dark]
    output-location: fragment
execute:
    echo: true
engine: jupyter
editor_options: 
  markdown: 
    wrap: 99
---

# Tipos de datos en DS

## Datos estructurados ‚Äì Dataframes

* Tablas de datos heterog√©neos
* Com√∫nmente referidos como *tablas*
* Cada fila es una observaci√≥n o *sample*
* Cada columna es una variable o *feature*

. . .

* Todas las observaciones deben tener el mismo n√∫mero de variables, aunque pueden tener valores nulos o *missing values*
* Los valores de las variables pueden ser de diferentes tipos, aunque todos los valores de una misma variable deben ser del mismo tipo

## Variables categ√≥ricas

* Variables que toman valores de un conjunto finito y discreto de valores
* Pueden ser ordinales (ordenadas, e.g. `low`, `medium`, `high`) o nominales (no ordenadas, e.g. `red`, `green`, `blue`)
* Se pueden representar como cadenas de texto o como enteros
* En el caso de representarlas como enteros, se denominan *variables dummy* o *variables indicadoras*

## Almacenado de datos estructurados

* Los dataframes se pueden almacenar en diferentes formatos
* Los m√°s comunes son CSV, SQL, Apache Arrow, etc.

## Datos no estructurados

## JSON

* Formato de texto para el intercambio de datos (APIs, etc.)
* Basado en la sintaxis de JavaScript
* Formado por pares clave-valor

## XML

* Similar a JSON, pero con una sintaxis m√°s compleja, basada en etiquetas
* Espacialmente menos eficiente que JSON (etiquetas)

## Im√°genes

* Tensores de 3 dimensiones (ancho, alto, canales)
* Cada elemento del tensor es un valor de intensidad de un canal de color
* Los valores de intensidad pueden ser enteros o reales
* Dependiendo del tipo de imagen, los canales pueden ser RGB, HSV, etc.
* M√∫ltiples formatos de almacenamiento (PNG, JPEG, etc.), dependiendo del caso de uso

## M√°s alla

* Audio ‚Äì Tensores de 1 dimensi√≥n (muestras)
* Texto (no estructurado) ‚Äì NLP

# `pandas`

## ¬øQu√© es `pandas`?

* Librer√≠a de Python para trabajar de manera eficiente con datos heterog√©neos (tablas, series temporales, etc.)
* Forma parte de `SciPy`, junto con `numpy`, `matplotlib` y `scikit-learn`
* Permite leer y escribir datos en diferentes formatos (CSV, Excel, SQL, etc.)
* Se basa en las colecciones `Series` y `DataFrame`

## `Series`

* Estructuras unidimensionales similares a los `ndarray` de `numpy`
* Cada elemento tiene un √≠ndice asociado
* Se pueden crear a partir de listas, diccionarios, `ndarray`, etc.

```python
s = pd.Series([1, 2, 3, 4]) # √≠ndices por defecto
s = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd']) # √≠ndices sem√°nticos
```

## `DataFrame`

* Podemos entender un `DataFrame` como una colecci√≥n de `Series` concatenadas verticalmente, compartiendo un listado de √≠ndices com√∫n
* Se pueden crear a partir de diccionarios, listas de listas, `ndarray`, etc.

```python
df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
```

## Trabajo con `Series` y `DataFrame`

## B√∫squeda de datos

* `<objeto>.isin(<lista>)`: devuelve una m√°scara booleana con los elementos que est√°n en la lista
* `<objeto>.loc[<m√°scara>]`: devuelve los elementos que cumplen la m√°scara
* Las m√°scaras son expresiones booleanas que se pueden combinar con operadores l√≥gicos (`&`, `|`, `~`)
* `<objeto> in <lista>.index`: booleano que indica si el objeto est√° en la lista de √≠ndices sem√°nticos
* `<objeto> in <lista>.columns`: booleano que indica si el objeto est√° en la lista de columnas (solo para `DataFrame`)

## B√∫squeda de datos ‚Äì Ejemplos

```python
df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
df.loc[df['a'].isin([1, 2])]
```

## Indexado

* `Series` permiten indexado como los `ndarray` (por √≠ndice posicional (e.g. `s[0]`) o sem√°ntico (e.g. `s['a']`))
    * Por defecto, los √≠ndices sem√°nticos son los enteros del 0 al `len(s) - 1`
* `DataFrame`, adem√°s, permiten indexado por columna

. . .

* `pandas` siempre interpreta enteros como posiciones, no como √≠ndices sem√°nticos (e.g. `df[0]` devuelve la primera columna, no la columna con √≠ndice `0`)
    * Para evitar confusiones, se puede usar `loc` o `iloc`
    * `loc` permite indexado y slicing por √≠ndice sem√°ntico
    * `iloc` permite indexado y slicing por posici√≥n
* En el caso de `DataFrame`, tanto `loc` como `iloc` permiten indexado y slicing por filas y columnas, especificando el eje con el argumento `axis`

## Indexado ‚Äì Ejemplos

```python
df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
df.loc[0, 'a']
df.iloc[0, 0]
```

## Slicing

* `Series` permiten slicing como los `ndarray` (por √≠ndice posicional o sem√°ntico)
* El slicing por √≠ndice posicional excluye el extremo superior (al igual que en `ndarray`)
* El slicing por √≠ndice sem√°ntico incluye ambos extremos
* `DataFrame` permiten slicing por filas y columnas, especificando el eje con el argumento `axis`

. . .

* `loc`e `iloc` son √∫tiles para filtrar filas y columnas simult√°neamente, y trabajar con un subconjunto de los datos
* Tambi√©n es posible indexado condicional por m√°scaras booleanas, que se pueden generar con operadores l√≥gicos
* Para eliminar filas o columnas, se puede usar el m√©todo `drop`, indicando los √≠ndices sem√°nticos o posicionales de las filas o columnas a eliminar, y el eje con el argumento `axis`

```python
df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
df.drop([0, 1], axis=0)
```

## Ordenado de datos

* `Series` y `DataFrame` tienen el m√©todo `sort_values`, que permite ordenar los datos por los valores de una columna o serie
* El m√©todo `sort_index`, que permite ordenar los datos por los √≠ndices sem√°nticos o posicionales
* `rank` retorna el rango de cada elemento de la serie o columna, ordenados por los valores de la serie o columna
* Todas estas operaciones permiten especificar orden ascendente o descendente con el argumento `ascending`

```python
df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
df.sort_values('a', ascending=False)
```

## Operaciones aritm√©ticas

* Las operaciones se realizan elemento a elemento
* Aquellos casos en los que no hay un valor para una combinaci√≥n de √≠ndices, se rellenan con `NaN`
* `pandas` permite especificar un valor por defecto para los valores `NaN` con el argumento `fill_value`

| M√©todo | Ejemplo | Expresion Equivalente |
|-----------|-------------|-----------------------|
| `add` | `df1.add(df2)` | `df1 + df2` |
| `sub` | `df1.sub(df2)` | `df1 - df2` |
| `mul` | `df1.mul(df2)` | `df1 * df2` |
| `div` | `df1.div(df2)` | `df1 / df2` |

## `apply`

* Permite aplicar una funci√≥n a cada elemento de una serie o columna
* La funci√≥n puede ser una funci√≥n lambda o una funci√≥n definida por el usuario
* `apply` tambi√©n se puede usar para aplicar una funci√≥n a cada fila o columna de un `DataFrame`, especificando el eje con el argumento `axis`

```python
df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
df.apply(lambda x: x ** 2)
```

## Estad√≠stica descriptiva

* `describe` calcula estad√≠stica descriptiva b√°sica (media, desviaci√≥n est√°ndar, cuartiles, etc.)

| M√©todo | Descripci√≥n |
|--------|-------------|
| `count` | N√∫mero de elementos no nulos |
| `describe` | Estad√≠stica descriptiva b√°sica |
| `min`, `max` | M√≠nimo y m√°ximo |
| `argmin`, `argmax` | √çndice del m√≠nimo y m√°ximo |
| `idxmin`, `idxmax` | √çndice sem√°ntico del m√≠nimo y m√°ximo |
| `sum` | Suma |
| `mean` | Media |
| `median` | Mediana |
| `std`, `var` | Desviaci√≥n est√°ndar y varianza |
| `skew` | Asimetr√≠a |
| `quantile` | Cuantiles |
| `cumsum` | Suma acumulada |
| `diff` | Diferencia entre elementos consecutivos |

## Correlaci√≥n

* `corr` calcula la correlaci√≥n entre columnas o series
    * $\rho_{X,Y} = \frac{cov(X,Y)}{\sigma_X \sigma_Y}$
* `cov` calcula la covarianza entre columnas o series
    * $cov(X,Y) = E[(X - E[X])(Y - E[Y])]$

```python
df = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
df.corr()
```
